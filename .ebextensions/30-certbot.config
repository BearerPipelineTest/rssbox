# For your initial cert, invoke certbot manually:
# - Set up EFS first so that all of your servers sync the /etc/letsencrypt/ directory. This will also keep your certs safe when servers are terminated. See 11-efs.config.
# - Scale down your app to only one instance.
# - If your ASG is using ELB health checks (which is the default when using a load balancer), then temporarily suspend the HealthCheck process on the ASG.

# sudo su
# CERTBOT_EMAIL=your.email@gmail.com
# CERTBOT_DOMAIN=yourdomainhere.elasticbeanstalk.com
# service nginx stop
# ./certbot-auto certonly --debug --non-interactive --agree-tos --keep-until-expiring --standalone --preferred-challenges http --email $CERTBOT_EMAIL --domains $CERTBOT_DOMAIN
# ln -sf $CERTBOT_DOMAIN /etc/letsencrypt/live/eb

# Then go to /etc/letsencrypt/renewal/ and update your config to renew the cert using webroot, something like this:
# [renewalparams]
# authenticator = webroot
# [[webroot_map]]
# yourdomainhere.elasticbeanstalk.com = /var/www/acme-challenge

# Once you have the cert and the symlink is set up, update nginx.conf to use it.
# Don't forget to resume the HealthCheck process on the ASG.

files:
  /opt/certbot-renew:
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash -e
      # Sleep randomly, up to 10 minutes, to make it less likely that two servers try to renew at the same time
      sleep $(($RANDOM%600))
      /opt/certbot-auto renew --debug
      # Reload the nginx configuration every time, since there may be multiple servers running. Using --renew-hook would only fix the server that made the renewal.
      service nginx reload

  /etc/cron.d/certbot:
    mode: "000644"
    owner: root
    group: root
    content: |
      @daily root /opt/certbot-renew

container_commands:
  "01":
    command: "wget -O certbot-auto https://dl.eff.org/certbot-auto; chmod a+x certbot-auto"
    cwd: /opt
    test: test ! -f /opt/certbot-auto
  "02":
    command: "mkdir -p /var/www/acme-challenge/"
    test: test ! -d /var/www/acme-challenge/
